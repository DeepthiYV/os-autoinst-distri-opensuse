#!/bin/bash -e

usage() {
    cat << EOF
Check code style against common rules and fail if style is not according to
the checked rules.

Usage:
 $0

Options:
 -h, -?, --help         display this help
EOF
    exit "$1"
}

set -o pipefail

opts=$(getopt -o h --long help -n 'parse-options' -- "$@") || usage 1
eval set -- "$opts"
while true; do
  case "$1" in
    -h | --help ) usage 0; shift ;;
    -- ) shift; break ;;
    * ) break ;;
  esac
done

fail() {
    echo "$*" >&2
    exit 1
}

files=('**.p[ml]')
res=$(grep -noP  "check_var\('ARCH', .*\)|check_var\('BACKEND',.*\)"  $(git status --porcelain "${files[@]}" | awk '{ print $2 }') | grep -v "Utils") 
echo "Use the existing functions defined in 'lib/Utils/Architecture.pm' and 'lib/Utils/Backends.pm' for checking the specific ARCH and BACKEND types instead of calling check_var()"  &&echo && echo   "$res"
git grep -P 'check_screen.*00(?!.*nocheck:)' || exit 0
fail "See https://github.com/os-autoinst/os-autoinst-distri-opensuse/blob/master/CONTRIBUTING.md#coding-style for more details"
